Saga:
    Saga is a generator function that handles a asynchronous operations and side effects in redux application

Effects:
    Redux-Saga provides a variety of effects that are used to manage side effects in a Redux application. 
    These effects are plain JavaScript objects that instruct the middleware to perform specific actions. Here's 
    a comprehensive list of the main effects available in Redux-Saga:

    Basic Effects:
        call(fn, ...args)
            Calls a function and can yield the result. It's used for making asynchronous calls, like API requests.
            Example:
                const response = yield call(fetch, 'https://api.example.com/data'); 
        put(action)
            Dispatches an action to the Redux store.
            Example: 
                yield put({ type: 'FETCH_DATA_SUCCESS', payload: data });
        take(pattern) 
            Waits for an action that matches the pattern.
            Example: 
                const action = yield take('FETCH_DATA_REQUEST');
        select(selector, ...args) 
            Accesses the state of the Redux store.
            Example: 
                const state = yield select(state => state.someReducer);
    
    Flow Control Effects:
        fork(fn, ...args)
            Starts a non-blocking task. The task runs in the background.
            Example: 
                yield fork(watchFetchData);
        join(task)
            Waits for a previously forked task to complete.
            Example: 
                const task = yield fork(fetchData);
                yield join(task);
        cancel(task)
            Cancels a previously forked task.
            Example: 
                const task = yield fork(fetchData);
                yield cancel(task);
        delay(ms, val)
            Delays the Saga for a specified amount of time.
            Example: 
                yield delay(1000); // delays for 1 second

    Advanced Effects:
        all([...effects])
            Runs multiple effects in parallel and waits for all of them to complete.
            Example: 
                yield all([
                call(fetchData1),
                call(fetchData2),
                ]);
        race({...effects})
            Runs multiple effects in parallel but only returns the result of the first effect that completes.
            Example: 
                const { response, timeout } = yield race({
                response: call(fetchData),
                timeout: delay(1000),
                });
        takeEvery(pattern, saga, ...args)
            Spawns a new saga on each action that matches the pattern. Runs multiple instances of the saga concurrently.
            Example: 
                yield takeEvery('FETCH_DATA_REQUEST', fetchDataSaga);
        takeLatest(pattern, saga, ...args)
            Spawns a new saga on each action that matches the pattern, but cancels any previous saga if it's still running.
            Example: 
                yield takeLatest('FETCH_DATA_REQUEST', fetchDataSaga);
        takeLeading(pattern, saga, ...args)
            Spawns a new saga on each action that matches the pattern, but ignores any subsequent actions while the current saga is still running.
            Example: 
                yield takeLeading('FETCH_DATA_REQUEST', fetchDataSaga);
        
    Helper Effects:
        actionChannel(pattern)
            Creates a channel to queue actions matching the pattern. Useful for controlling concurrency.
            Example:
                const requestChan = yield actionChannel('FETCH_DATA_REQUEST');
        flush(channel)
            Empties the items from the provided chann
            Example: 
                const actions = yield flush(requestChan);
        cancelled() 
            Returns true if the saga was cancelled.
            Example: 
                if (yield cancelled()) {
                // cleanup logic
                }

    Utility Effects:
        cps(fn, ...args)
            Calls a function that follows the Node.js callback style.
            Example:
                const result = yield cps(myNodeStyleFunction, arg1, arg2);
        spawn(fn, ...args)
            Similar to fork, but the spawned task is detached and doesn't affect the parent task.
            Example:  
                yield spawn(fetchDataSaga);


Worker Saga
    A worker saga is a generator function that performs the actual work. This work often includes
    tasks like making API calls, processing data, or dispatching actions to the Redux store.

Watcher Saga
    A watcher saga is a generator function that watches for specific actions dispatched to the 
    Redux store. When it detects these actions, it triggers the corresponding worker saga to 
    perform the actual work.